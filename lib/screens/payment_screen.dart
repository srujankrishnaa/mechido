import 'package:flutter/material.dart';
import 'package:razorpay_flutter/razorpay_flutter.dart';
import 'package:provider/provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart'; // Add this import
import 'dart:async'; // Add this import for TimeoutException
import '../models/mechanic.dart';
import '../models/service.dart';
import '../models/booking.dart';
import '../providers/cart_provider.dart';
import 'payment_success_screen.dart';
import 'payment_fail_screen.dart';
import 'track_service_screen.dart';
import 'emergency_track_screen.dart';
import '../services/supabase_service.dart';
import 'package:latlong2/latlong.dart'; // Import LatLng

class PaymentScreen extends StatefulWidget {
  final Mechanic mechanic;
  final Service service;
  final double amount;

  const PaymentScreen({
    Key? key,
    required this.mechanic,
    required this.service,
    required this.amount,
  }) : super(key: key);

  @override
  State<PaymentScreen> createState() => _PaymentScreenState();
}

class _PaymentScreenState extends State<PaymentScreen> {
  late Razorpay _razorpay;
  bool _isLoading = false;
  final SupabaseService _supabaseService = SupabaseService();

  @override
  void initState() {
    super.initState();
    _razorpay = Razorpay();
    _razorpay.on(Razorpay.EVENT_PAYMENT_SUCCESS, _handlePaymentSuccess);
    _razorpay.on(Razorpay.EVENT_PAYMENT_ERROR, _handlePaymentError);
    _razorpay.on(Razorpay.EVENT_EXTERNAL_WALLET, _handleExternalWallet);
  }

  @override
  void dispose() {
    _razorpay.clear();
    super.dispose();
  }

  void _handlePaymentSuccess(PaymentSuccessResponse response) async {
    setState(() {
      _isLoading = true;
    });

    try {
      // Get the current user ID
      final user = Supabase.instance.client.auth.currentUser;
      if (user == null) {
        throw Exception('User not authenticated. Please login again.');
      }

      print('Current user ID: ${user.id}');

      // Create a new booking with the correct total amount and tracking details
      final booking = Booking(
        id: DateTime.now()
            .millisecondsSinceEpoch
            .toString(), // Or use a UUID generated by Supabase
        userId: user.id,
        mechanicName: widget.mechanic.name,
        mechanicImage: widget.mechanic.image,
        mechanicRating: widget.mechanic.rating,
        serviceType: widget.service.name,
        amount: widget.amount,
        bookingDate: DateTime.now(),
        status: 'Arriving', // Initial status
        paymentId: response.paymentId, // Save payment ID
        paymentStatus: 'Completed', // Set payment status
        // Add initial tracking details (placeholders for now)
        mechanicPosition: null, // Will be updated by tracking service
        destinationPosition:
            const LatLng(17.4500, 78.3800), // Placeholder for user location
        eta:
            14 * 60, // Initial ETA in seconds (same as TrackingService default)
        currentPhase: 'Arriving', // Initial phase
      );

      print('Attempting to create booking: ${booking.toMap()}');

      // Save booking to Supabase with timeout
      final savedBooking = await _supabaseService
          .createBooking(booking)
          .timeout(const Duration(seconds: 30));

      print('Booking created successfully with ID: ${savedBooking.id}');

      // Clear the cart after successful booking
      if (mounted) {
        Provider.of<CartProvider>(context, listen: false).clearCart();
      }

      // Navigate to tracking screen, removing all routes except the first (Home)
      if (mounted) {
        // First pop all existing routes up to the home screen
        Navigator.of(context).popUntil((route) => route.isFirst);

        // Then navigate to the PaymentSuccessScreen
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => PaymentSuccessScreen(
              bookingId: savedBooking.id,
              isEmergencyBooking: widget.service.name
                  .toLowerCase()
                  .contains('emergency'), // Pass emergency flag
            ),
          ),
        );
      }
    } on TimeoutException catch (e) {
      print('Timeout error: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text(
                'Request timeout. Please check your internet connection and try again.'),
            backgroundColor: Color(0xFFFF3B30),
          ),
        );
      }
    } catch (e) {
      print('Supabase booking error: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Booking creation failed: ${e.toString()}'),
            backgroundColor: const Color(0xFFFF3B30),
            action: SnackBarAction(
              label: 'Retry',
              textColor: Colors.white,
              onPressed: () => _startPayment(),
            ),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  void _handlePaymentError(PaymentFailureResponse response) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => PaymentFailScreen(
          onRetry: () {
            Navigator.pop(context);
          },
        ),
      ),
    );
  }

  void _handleExternalWallet(ExternalWalletResponse response) {
    // Handle external wallet selection
  }

  void _startPayment() {
    setState(() {
      _isLoading = true;
    });

    var options = {
      'key': 'rzp_test_ZUYCwrNHDTb2YD', // Replace with your Razorpay key
      'amount':
          (widget.amount * 100).toInt(), // Amount in smallest currency unit
      'name': 'Mechido',
      'description': widget.service.name,
      'prefill': {'contact': '9199999999', 'email': 'user@example.com'}
    };

    try {
      _razorpay.open(options);
    } catch (e) {
      print(e.toString());
    }

    setState(() {
      _isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF6F6F6),
      appBar: AppBar(
        backgroundColor: const Color(0xFF635BFF),
        elevation: 0,
        title: const Text(
          'PAYMENT',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
            fontSize: 18,
            letterSpacing: 1.1,
          ),
        ),
        centerTitle: true,
      ),
      body: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Payment Summary Card
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(16),
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.04),
                          blurRadius: 8,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Payment Summary',
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: 18,
                            color: Color(0xFF4A4A4A),
                          ),
                        ),
                        const SizedBox(height: 16),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text(
                              'Service Amount',
                              style: TextStyle(
                                color: Color(0xFF8E8E93),
                                fontSize: 16,
                              ),
                            ),
                            Text(
                              '₹${widget.service.price.toStringAsFixed(2)}',
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: Color(0xFF4A4A4A),
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text(
                              'Taxes & Charges',
                              style: TextStyle(
                                color: Color(0xFF8E8E93),
                                fontSize: 16,
                              ),
                            ),
                            Text(
                              '₹${(widget.service.price * 0.18).toStringAsFixed(2)}',
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                color: Color(0xFF4A4A4A),
                              ),
                            ),
                          ],
                        ),
                        const Divider(height: 24),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text(
                              'Total Amount',
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 18,
                                color: Color(0xFF4A4A4A),
                              ),
                            ),
                            Text(
                              '₹${widget.amount.toStringAsFixed(2)}',
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 20,
                                color: Color(0xFF635BFF),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 24),
                  // Payment Methods
                  const Text(
                    'Select Payment Method',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 18,
                      color: Color(0xFF4A4A4A),
                    ),
                  ),
                  const SizedBox(height: 16),
                  // Payment Method Cards
                  _buildPaymentMethodCard(
                    'Credit/Debit Card',
                    Icons.credit_card,
                    true,
                  ),
                  const SizedBox(height: 12),
                  _buildPaymentMethodCard(
                    'UPI',
                    Icons.phone_android,
                    false,
                  ),
                  const SizedBox(height: 12),
                  _buildPaymentMethodCard(
                    'Net Banking',
                    Icons.account_balance,
                    false,
                  ),
                ],
              ),
            ),
          ),
          // Pay Now Button
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.white,
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.04),
                  blurRadius: 8,
                  offset: const Offset(0, -2),
                ),
              ],
            ),
            child: ElevatedButton(
              onPressed: _isLoading ? null : _startPayment,
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF635BFF),
                minimumSize: const Size(double.infinity, 50),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              child: _isLoading
                  ? const SizedBox(
                      width: 24,
                      height: 24,
                      child: CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 2,
                      ),
                    )
                  : const Text(
                      'Pay Now',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                        fontSize: 16,
                      ),
                    ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPaymentMethodCard(
    String title,
    IconData icon,
    bool isSelected,
  ) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: isSelected ? const Color(0xFF635BFF) : Colors.transparent,
          width: 2,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.04),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: isSelected
                  ? const Color(0xFF635BFF).withOpacity(0.1)
                  : const Color(0xFFF6F6F6),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(
              icon,
              color: isSelected
                  ? const Color(0xFF635BFF)
                  : const Color(0xFF8E8E93),
              size: 24,
            ),
          ),
          const SizedBox(width: 12),
          Text(
            title,
            style: TextStyle(
              fontWeight: FontWeight.w600,
              fontSize: 16,
              color: isSelected
                  ? const Color(0xFF635BFF)
                  : const Color(0xFF4A4A4A),
            ),
          ),
          const Spacer(),
          if (isSelected)
            Container(
              padding: const EdgeInsets.all(4),
              decoration: const BoxDecoration(
                color: Color(0xFF635BFF),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: Colors.white,
                size: 16,
              ),
            ),
        ],
      ),
    );
  }
}
